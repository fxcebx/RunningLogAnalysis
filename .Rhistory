aggOOP <- aggregate(oop ~ patid + payer, data=dfMed, sum)
dfSpendingEnrollee <- merge(aggPaid, aggOOP, by=c("patid", "payer"), all=TRUE)
nSpendingEnrollee <- nrow(dfSpendingEnrollee)
diffEnrollee <- nEnrollee - nSpendingEnrollee
pctdiffEnrollee <- (diffEnrollee / nEnrollee) * 100
rm(aggPaid, aggOOP)  # Clean up
aggPaid <- aggregate(paid ~ patid + payer, data=dfMed, sum)
aggOOP <- aggregate(oop ~ patid + payer, data=dfMed, sum)
dfSpendingEnrollee <- merge(aggPaid, aggOOP, by=c("patid", "payer"), all=TRUE)
nSpendingEnrollee <- nrow(dfSpendingEnrollee)
diffEnrollee <- nEnrollee - nSpendingEnrollee
pctdiffEnrollee <- (diffEnrollee / nEnrollee) * 100
rm(aggPaid, aggOOP)  # Clean up
thresholdLow <- 1
thresholdHigh <- max(dfSpendingEnrollee$paid, na.rm=TRUE)
dfSubset <- subset(dfSpendingEnrollee, dfSpendingEnrollee$paid > thresholdLow)
breaks <- c(1, 10, 100, 1000, 10000, 100000)
labels <- c("1", "10", "100", "1,000", "10,000", "100,000")
limits <- c(thresholdLow, thresholdHigh)
ggplot(dfSubset, aes(x=paid, fill=payer)) +
geom_density(linetype=0, alpha=1/2, adjust=1) +
scale_x_log10("Paid", breaks=breaks, labels=labels, limits=limits) +
scale_fill_discrete("Payer") + facet_wrap(~ payer, nrow=3) +
labs(title="Aggregate paid amount of enrollees") +
theme(legend.position="none")
thresholdLow <- 1
thresholdHigh <- max(dfSpendingEnrollee$oop, na.rm=TRUE)
dfSubset <- subset(dfSpendingEnrollee, dfSpendingEnrollee$oop > thresholdLow)
breaks <- c(1, 10, 100, 1000, 10000, 100000)
labels <- c("1", "10", "100", "1,000", "10,000", "100,000")
limits <- c(thresholdLow, thresholdHigh)
ggplot(dfSubset, aes(x=oop, fill=payer)) +
geom_density(linetype=0, alpha=1/2, adjust=1) +
scale_x_log10("Out-of-pocket", breaks=breaks, labels=labels, limits=limits) +
scale_fill_discrete("Payer") + facet_wrap(~ payer, nrow=3) +
labs(title="Aggregate out-of-pocket amount of enrollees") +
theme(legend.position="none")
dfSubset <- subset(dfMed, select=c(isMedicaid, isCommercial))
dfSubset$isMedicaid <- factor(dfSubset$isMedicaid, levels=c(FALSE, TRUE), labels=c("No Medicaid claims", "Some Medicaid claims"))
dfSubset$isCommercial <- factor(dfSubset$isCommercial, levels=c(FALSE, TRUE), labels=c("No Commercial claims", "Some Commercial claims"))
ggplot(dfSubset, aes(x=isMedicaid, y=isCommercial)) +
geom_bin2d() +
scale_fill_gradient("Individuals") +
scale_x_discrete("Medicare") + scale_y_discrete("Commercial") +
theme(legend.position="bottom")
require(Bolstad, quietly=TRUE)
require(ggplot2, quietly=TRUE)
install.packages("Bolstad")
require(Bolstad, quietly=TRUE)
require(ggplot2, quietly=TRUE)
n <- 1
x <- 1
postObama <- binobp(x, n, a=a, b=b)
a <- 1
b <- 40
postObama <- binobp(x, n, a=a, b=b)
n <- 1
x <- 0
postObama <- binobp(x, n, a=a, b=b)
postObama <- binobp(x, n, a=a, b=b)
n <- 1
x <- 1
postObama <- binobp(x, n, a=a, b=b)
df <- makeGGdata(postObama)
ggplot(df, aes(x, prob, fill=type)) +
geom_area() +
scale_fill_hue("Distribution") +
scale_x_continuous("Probability Obama is Christian (%)", limits=c(0, 100)) +
scale_y_continuous("Density") +
geom_vline(xintercept=(x / n * 100)) +
labs(title="Data source:\n") +
theme(legend.position="bottom")
?rxSummary
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
head(iris)
mean(iris$Sepal.Length[iris$Species=="virginica"])
colMeans(iris)
rowMeans(iris[. 1:4])
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
Sys.info()
pat <- "^([a-z]+) +\\1 +[a-z]+ [0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+)"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +\\1"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +[a-z]+"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) [0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +[a-z]+ [0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +\\1 +[a-z]+ [0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +\\1 [0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
pat <- "^([a-z]+) +\\1 +[0-9]"
str <- c("heading, heading by 9", "night night at 8", "bye bye from up high", "going up and up and up")
pat
str
grep(pat, str)
?setOldClass
x <- character(0)
is.null(x)
length(x)
x <- ""
is.null(x)
length(x)
Sys.Data()
Sys.Date()
paste(Sys.Date())
rep(seq(2004, 2012), 2)
rep(seq(2004, 2012), by=2)
?rep
rep.int(seq(2004, 2012), 2)
rep(seq(2004, 2012), each=2)
require(RCurl, quietly=TRUE)
myCSV <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E")
?getURL
myCSV <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E&single=true&gid=0&output=csv")
myCSV <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header = T, sep = ",")
df <- read.csv(textConnection(url), header = T, sep = ",")
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header = T, sep = ",")
View(df)
toInstall <- c("ggplot2")
if(doInstall){install.packages(toInstall, repos = "http://cran.r-project.org")}
library(ggplot2)
text.plots <- data.frame(
SUPP = c (rep(c( "Control", "Vitamin C", "Orange Juice" ), each = 1500))  ,
DOSE = rep(rep(c( "I", "II", "III" ), each=500), 3),
LENGTH = c(rnorm(500, 4, 2),
rnorm(500, 7, 1.2),
rnorm(500, 8, 1.4),
rnorm(500, 7, 1),
rnorm(500, 8, 4),
rnorm(500, 10, 2),
rnorm(500, 8, 2.7),
rnorm(500, 7, 1.8),
rnorm(500, 6, 1.9)), stringsAsFactors = FALSE )
Plot.0 <- ggplot( text.plots, aes( x = SUPP, y = LENGTH , fill = SUPP ) ) +
geom_boxplot( alpha = 0.6, outlier.colour = c("grey40") , outlier.size=3.5
) + scale_fill_manual(values=c("cadetblue", "orange", "orangered3")) +
facet_wrap(~DOSE) + theme_bw() +labs(title="Tooth Growth in Guinea Pigs \n",
x="\n Treatment", y="Change in Length (mm) \n") +  guides(fill = guide_legend("\n Supplement")) +geom_hline(y=0, lty=2)
Plot.0
#Things we may
#want to do:
#1. Change Y-Axis Breaks:
Plot.0 + scale_y_continuous(breaks=seq(-4, 22, by=2))
Plot.0 + scale_y_continuous(breaks=c(-4, -2, 0, 5:22))
Plot.0 + scale_y_continuous(breaks=c(-4, -2, 0, 5, 8, 14:22))
Plot.1 <- Plot.0 + scale_y_continuous(breaks=seq(-4, 24, by=4))
Plot.1
m4 <-lmer(size~levs - 1 +(1|ind), data=idf_rand)
library(lme4)
library(ggplot2)
#create some levels
levs <- as.factor(c("l1","l2","l3","l4","l5"))
#set the factor means
f_means <- c(6,16,2,10,13)
# set individual as a factor
ind <- as.factor(paste("i",1:9,sep=""))
#Set individual effects
i_eff <- seq(-4,4,length=9)
#now let's simulate a repeated measure for each individuals
idf <- data.frame(matrix(0,ncol=3,nrow=45))
colnames(idf) <- c("size","ind","levs")
counter <- 1
for(i in 1:length(levs)){
for(j in 1:length(ind)){
idf$size[counter] <- rnorm(1,f_means[i]+i_eff[j],.3)
idf$ind[counter] <- ind[j]
idf$levs[counter] <- levs[i]
counter <- counter + 1
}
}
idf$ind <- rep(ind,5)
idf$levs <- sort(rep(levs,9))
ggplot(idf,aes(x=levs,y=size,group=ind,colour=ind))+geom_point()+geom_path()
m3 <-lmer(size~levs - 1 +(1|ind), data=idf)
## Now let's randomize the individuals
idf_rand <- idf
for(i in 1:5){
idf_rand$ind[idf_rand$levs==levs[i]]  <- sample(idf$ind[idf$levs==levs[i]],9,replace=F)
}
# here we can visualize the data and examine individual effects
ggplot(idf_rand,aes(x=levs,y=size,group=ind,colour=ind))+geom_point()+geom_path()
#Fit the model and then check the variance term
m4 <-lmer(size~levs - 1 +(1|ind), data=idf_rand)
install.packages("lme4")
library(lme4)
library(ggplot2)
#create some levels
levs <- as.factor(c("l1","l2","l3","l4","l5"))
#set the factor means
f_means <- c(6,16,2,10,13)
# set individual as a factor
ind <- as.factor(paste("i",1:9,sep=""))
#Set individual effects
i_eff <- seq(-4,4,length=9)
#now let's simulate a repeated measure for each individuals
idf <- data.frame(matrix(0,ncol=3,nrow=45))
colnames(idf) <- c("size","ind","levs")
counter <- 1
for(i in 1:length(levs)){
for(j in 1:length(ind)){
idf$size[counter] <- rnorm(1,f_means[i]+i_eff[j],.3)
idf$ind[counter] <- ind[j]
idf$levs[counter] <- levs[i]
counter <- counter + 1
}
}
idf$ind <- rep(ind,5)
idf$levs <- sort(rep(levs,9))
ggplot(idf,aes(x=levs,y=size,group=ind,colour=ind))+geom_point()+geom_path()
m3 <-lmer(size~levs - 1 +(1|ind), data=idf)
## Now let's randomize the individuals
idf_rand <- idf
for(i in 1:5){
idf_rand$ind[idf_rand$levs==levs[i]]  <- sample(idf$ind[idf$levs==levs[i]],9,replace=F)
}
# here we can visualize the data and examine individual effects
ggplot(idf_rand,aes(x=levs,y=size,group=ind,colour=ind))+geom_point()+geom_path()
#Fit the model and then check the variance term
m4 <-lmer(size~levs - 1 +(1|ind), data=idf_rand)
summa(m3)
summary(m3)
m3
m4
setwd("C:/Users/chanb/Dropbox/Sandbox/Running")
require(RCurl, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
viewData(df)
viewData(df)
df$Distance <- as.numeric(df$Distance)
viewData(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance[df$Distance  = "--"] <- NaN
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance[df$Distance == "--"] <- NaN
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
df$Distance[df$Distance == "--"] <- NaN
viewData(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
viewData(df)
df$Distance != "--"
as.numeric(df$Distance[df$Distance != "--"])
length(as.numeric(df$Distance[df$Distance != "--"]))
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
df$Distance[df$Distance != "--"] <- df$Distance[df$Distance != "--"]
df$Distance[df$Distance != "--"]
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance != "--"
df$Distance[df$Distance != "--"]
as.numeric(df$Distance[df$Distance != "--"])
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance <- rep(NaN, length(df$Distance))
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Distance <- rep(NULL, length(df$Distance))
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance[df$Distance == "--"] <- NA
Distance
Distance[df$Distance == "--"] <- NaN
Distance
Distance[df$Distance == "--"] <- NA
df$Distance <- Distance
viewData(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
viewData(df)
as.numeric(df$Distance[df$Distance != "--"])
viewData(df)
df$Distance
unclass(df$Distance)
as.numeric(df$Distance)
?unclass
?format
?level
?levels
?factor
?read.csv
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance[df$Distance == "--"] <- NA
df$Distance <- Distance
viewData(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Distance <- rep(NULL, length(df$Distance))
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance[df$Distance == "--"] <- NA
df$Distance <- Distance
Time <- as.character(df$Time)
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
s <- as.numeric(sapply(strsplit(Time, ":"), "[[", 3))
is.incorrect <- s == 0
s[is.incorrect] <- m[is.incorrect]
m[is.incorrect] <- h[is.incorrect]
h[is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance[df$Distance == "--"] <- NA
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
df$Distance[df$Distance == "--"] <- NA
viewData(df)
summary(df$Distance)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Distance <- rep(NULL, length(df$Distance))
Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
Distance[df$Distance == "--"] <- NA
df$Distance <- Distance
summary(df$Distance)
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance[df$Distance != "--"] <- as.numeric(df$Distance[df$Distance != "--"])
df$Distance[df$Distance == "--"] <- NA
df$Distance <- as.numeric(df$Distance)
summary(df$Distance)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance <- as.numeric(df$Distance)
viewData(df)
Time <- df$Time
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
Time
Time <- df$Time
Time[Time == ":"] <- NA
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
Time
Time <- df$Time
Time[Time == ":"] <- NA
h[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 1))
m[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 2))
Time <- df$Time
Time[Time == ":"] <- NA
h <- rep(NULL, length(Time))
m <- rep(NULL, length(Time))
s <- rep(NULL, length(Time))
h[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 1))
m[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 2))
s[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 3))
is.incorrect <- s == 0
s[is.incorrect] <- m[is.incorrect]
is.incorrect
h
m
s
s[!is.na(Time) & is.incorrect] <- m[!is.na(Time) & is.incorrect]
m[!is.na(Time) & is.incorrect] <- h[!is.na(Time) & is.incorrect]
h[!is.na(Time) & is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
Time <- df$Time
Time[Time == ":"] <- "00:00:00"
h[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 1))
m[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 2))
s[!is.na(Time)] <- as.numeric(sapply(strsplit(Time[!is.na(Time)], ":"), "[[", 3))
is.incorrect <- s == 0
s[!is.na(Time) & is.incorrect] <- m[!is.na(Time) & is.incorrect]
m[!is.na(Time) & is.incorrect] <- h[!is.na(Time) & is.incorrect]
h[!is.na(Time) & is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
Time <- df$Time
Time[Time == ":"] <- "00:00:00"
h <- rep(NULL, length(Time))
m <- rep(NULL, length(Time))
s <- rep(NULL, length(Time))
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
s <- as.numeric(sapply(strsplit(Time, ":"), "[[", 3))
is.incorrect <- s == 0
s[is.incorrect] <- m[is.incorrect]
m[is.incorrect] <- h[is.incorrect]
h[is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
classes <- c("character", "integer", rep("character", 8))
df <- read.csv(textConnection(url), header=TRUE, sep=",", colClasses=classes)
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance <- as.numeric(df$Distance)
df$Distance[is.na(df$Distance)] <- 0
Time <- df$Time
Time[Time == ":"] <- "00:00:00"
h <- rep(NULL, length(Time))
m <- rep(NULL, length(Time))
s <- rep(NULL, length(Time))
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
s <- as.numeric(sapply(strsplit(Time, ":"), "[[", 3))
is.incorrect <- s == 0
s[is.incorrect] <- m[is.incorrect]
m[is.incorrect] <- h[is.incorrect]
h[is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
